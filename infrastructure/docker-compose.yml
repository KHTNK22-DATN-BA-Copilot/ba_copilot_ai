# Development Docker Compose Configuration
# BA Copilot AI Services

version: '3.8'

services:
  # Main application service
  ba-copilot-ai:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile
    container_name: ba-copilot-ai-app
    ports:
      - '8000:8000'
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app/src
    volumes:
      # Mount source code for development hot-reload
      - ../src:/app/src:ro
      - ../tests:/app/tests:ro
    networks:
      - ba-copilot-network
    depends_on:
      - redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/v1/health/']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ba-copilot-redis
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - ba-copilot-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Nginx reverse proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: ba-copilot-nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ba-copilot-ai
    networks:
      - ba-copilot-network
    restart: unless-stopped
    profiles:
      - with-nginx

# Named volumes
volumes:
  redis-data:
    driver: local

# Networks
networks:
  ba-copilot-network:
    driver: bridge
    name: ba-copilot-network
